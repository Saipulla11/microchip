
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000905  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081c  00000000  00000000  00000b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004f  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1b d0       	rcall	.+54     	; 0xd0 <main>
  9a:	3d c0       	rjmp	.+122    	; 0x116 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>

// Настройка UART
void UART_Init(unsigned int baud) {
	UBRR0H = (unsigned char)(baud>>8);
  9e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)baud;
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b2:	08 95       	ret

000000b4 <UART_Transmit>:
}

// Отправка символа через UART
void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1<<UDRE0)));
  b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  b8:	95 ff       	sbrs	r25, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <UART_Transmit>
	UDR0 = data;	
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c0:	08 95       	ret

000000c2 <UART_Receive>:
}

// Прием символа через UART
unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1<<RXC0)));
  c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  c6:	88 23       	and	r24, r24
  c8:	e4 f7       	brge	.-8      	; 0xc2 <UART_Receive>
	return UDR0;
  ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ce:	08 95       	ret

000000d0 <main>:

int main(void) {
	// Настройка UART на 9600 бод
	UART_Init(103);
  d0:	87 e6       	ldi	r24, 0x67	; 103
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	e4 df       	rcall	.-56     	; 0x9e <UART_Init>
	
	// Настраиваем PA1 и PA3 как выходы
	DDRA |= (1 << PA1) | (1 << PA3);
  d6:	81 b1       	in	r24, 0x01	; 1
  d8:	8a 60       	ori	r24, 0x0A	; 10
  da:	81 b9       	out	0x01, r24	; 1
	
	// Изначально выключаем оба светодиода
	PORTA &= ~((1 << PA1) | (1 << PA3));
  dc:	82 b1       	in	r24, 0x02	; 2
  de:	85 7f       	andi	r24, 0xF5	; 245
	
	while (1) {
		char command = UART_Receive();
  e0:	82 b9       	out	0x02, r24	; 2
  e2:	ef df       	rcall	.-34     	; 0xc2 <UART_Receive>
		
		switch(command) {
  e4:	82 37       	cpi	r24, 0x72	; 114
  e6:	29 f0       	breq	.+10     	; 0xf2 <main+0x22>
  e8:	88 37       	cpi	r24, 0x78	; 120
  ea:	79 f0       	breq	.+30     	; 0x10a <main+0x3a>
  ec:	82 36       	cpi	r24, 0x62	; 98
  ee:	c9 f7       	brne	.-14     	; 0xe2 <main+0x12>
  f0:	06 c0       	rjmp	.+12     	; 0xfe <main+0x2e>
			case 'r':  // Включить красный (PA1)
			PORTA |= (1 << PA1);
  f2:	82 b1       	in	r24, 0x02	; 2
  f4:	82 60       	ori	r24, 0x02	; 2
			UART_Transmit('R'); // Подтверждение
  f6:	82 b9       	out	0x02, r24	; 2
  f8:	82 e5       	ldi	r24, 0x52	; 82
  fa:	dc df       	rcall	.-72     	; 0xb4 <UART_Transmit>
			break;
  fc:	f2 cf       	rjmp	.-28     	; 0xe2 <main+0x12>
			
			case 'b':  // Включить синий (PA3)
			PORTA |= (1 << PA3);
  fe:	82 b1       	in	r24, 0x02	; 2
 100:	88 60       	ori	r24, 0x08	; 8
			UART_Transmit('B'); // Подтверждение
 102:	82 b9       	out	0x02, r24	; 2
 104:	82 e4       	ldi	r24, 0x42	; 66
 106:	d6 df       	rcall	.-84     	; 0xb4 <UART_Transmit>
			break;
 108:	ec cf       	rjmp	.-40     	; 0xe2 <main+0x12>
			
			case 'x':  // Выключить все
			PORTA &= ~((1 << PA1) | (1 << PA3));
 10a:	82 b1       	in	r24, 0x02	; 2
 10c:	85 7f       	andi	r24, 0xF5	; 245
			UART_Transmit('X'); // Подтверждение
 10e:	82 b9       	out	0x02, r24	; 2
 110:	88 e5       	ldi	r24, 0x58	; 88
 112:	d0 df       	rcall	.-96     	; 0xb4 <UART_Transmit>
			break;
 114:	e6 cf       	rjmp	.-52     	; 0xe2 <main+0x12>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
